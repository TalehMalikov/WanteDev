<Application x:Class="WanteDev.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WanteDev">
    <Application.Resources>

        <!--#region Style -->
        <Style x:Key="titleText" TargetType="TextBlock">
            <Setter Property="FontSize" Value="36"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#ffffff"/>
        </Style>

        <Style x:Key="normalText" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="LineHeight" Value="28"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="#ffffff"/>
        </Style>

        <Style x:Key="button" TargetType="Button">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Width" Value="170"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="#fdfefe"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="25" BorderThickness="1" BorderBrush="White" Padding="15">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#e8e8e8"/>
                    <Setter Property="Foreground" Value="DimGray"/>
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#d9d9d9"/>
                    <Setter Property="Foreground" Value="DimGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="buttonCircle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Margin" Value="8 0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="30" BorderThickness="1" BorderBrush="#878787" Padding="15">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#d9d9d9"/>
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#c4c4c4"/>
                </Trigger>
            </Style.Triggers>
        </Style>



        <Style x:Key="textBox" TargetType="Control">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Grid.Column" Value="1"/>
            <Setter Property="Margin" Value="10 0 0 0"/>
            <Setter Property="Foreground" Value="#878787"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>


        <Style x:Key="mainbutton" TargetType="Button">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Width" Value="200"/>
            <Setter Property="Margin" Value="0 14 0 0"/>
            <Setter Property="Background" Value="#3AB19B"/>
            <Setter Property="Foreground" Value="#FDFEFE"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="25" BorderThickness="1" BorderBrush="#49B7A3" Padding="15">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#339685"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#2d7a6c"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="imgClose" TargetType="Image">
            <Setter Property="Width" Value="30"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Margin" Value="0 13 13 0"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--#endregion-->

        <Style TargetType="{x:Type ListView}" x:Key="listViewCustom">
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
            <Setter Property="IsEnabled" Value="True"/>
            <Setter Property="FontWeight" Value="DemiBold"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"></Setter>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Visible"></Setter>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="AlternationCount" Value="2"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="FontSize" Value="14"/>
        </Style>

        <Style TargetType="{x:Type Grid}" x:Key="grdSearch">
            <Setter Property="IsEnabled" Value="True"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="4">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Grid}" x:Key="grdForm">
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="4">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="btnAdd">
            <Setter Property="Content" Value="Add"/>
            <Setter Property="IsEnabled" Value="True"/>
            <Setter Property="Command" Value="{Binding Save}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                    <Setter Property="Content" Value="Save"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="4">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="btnChange">
            <Setter Property="Content" Value="Edit"/>
            <Setter Property="IsEnabled" Value="True"/>
            <Setter Property="Command" Value="{Binding Save}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                    <Setter Property="Content" Value="Save"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="btnReject">
            <Setter Property="Content" Value="Cancel Changes"/>
            <Setter Property="IsEnabled" Value="True"/>
            <Setter Property="Command" Value="{Binding Reject}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Button}"  x:Key="btnDelete">
            <Setter Property="Content" Value="Delete"/>
            <Setter Property="Command" Value="{Binding Delete}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--#region BtnActivate BtnShow-->

        <!--<Style TargetType="{x:Type Button}" BasedOn="{StaticResource WellDesignedButton}" x:Key="btnActivate">
            <Setter Property="BitmapEffect">
                <Setter.Value>
                    <DropShadowBitmapEffect Color="Black" Direction="320" Softness="1" ShadowDepth="10" Opacity="0.5" />
                </Setter.Value>
            </Setter>
            <Setter Property="Content" Value="Activate"/>
            <Setter Property="Command" Value="{Binding SetTechnicStatus}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentValue.IsActive}" Value="True">
                    <Setter Property="Content" Value="Deactivate"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>-->

        <!--<Style TargetType="{x:Type Button}" BasedOn="{StaticResource WellDesignedButton}" x:Key="btnShowLogs">
            <Setter Property="Content" Value="Show Tasks"/>
            <Setter Property="Command" Value="{Binding ShowLogs}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>-->
        <!--#endregion-->



        <Style TargetType="{x:Type Button}"  x:Key="btnExcel">
            <Setter Property="Content" Value="Excel"/>
            <Setter Property="Width" Value="70"/>
            <Setter Property="FontSize" Value="15"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Command" Value="{Binding ExportExcel}"/>
            <Setter Property="Background" Value="#FF008306"/>
        </Style >

        <Style TargetType="TextBlock" x:Key="gridViewTextColumn">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Padding" Value="15,0"/>
        </Style>

    </Application.Resources>
</Application>
